/*
 * This Spock specification was generated by the Gradle 'init' task.
 */
package org.example

import org.spockframework.runtime.extension.AbstractAnnotationDrivenExtension
import org.spockframework.runtime.extension.ExtensionAnnotation
import org.spockframework.runtime.extension.IMethodInterceptor
import org.spockframework.runtime.extension.IMethodInvocation
import org.spockframework.runtime.model.FeatureInfo
import spock.lang.Specification
import spock.lang.Unroll

import java.lang.annotation.Retention
import java.lang.annotation.RetentionPolicy

class LibraryTest extends Specification {
    @Unroll
    @MyAnnotation
    def "test with placeholder #value"() {
        expect:
        true
        where:
        value << ['foo', 'bar']
    }
}

@Retention(RetentionPolicy.RUNTIME)
@ExtensionAnnotation(MyExtension.class)
@interface MyAnnotation {
}

class MyExtension extends AbstractAnnotationDrivenExtension<MyAnnotation> {
    @Override
    void visitFeatureAnnotation(MyAnnotation annotation, FeatureInfo feature) {
        if (feature.isParameterized()) {
            feature.addIterationInterceptor(new MyMethodInterceptor())
        }
    }
}

class MyMethodInterceptor implements IMethodInterceptor {
    @Override
    void intercept(IMethodInvocation invocation) throws Throwable {
        invocation.proceed()
        throw new RuntimeException()
    }
}
